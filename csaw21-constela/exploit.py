#!/usr/bin/env python3.8

import json
import base64
import matplotlib.pyplot as plt

# decode the concatenation of the two strings in base64
# forming the GPGGA coordinates
def find_coordinates(first, second):
    coord = [] # list to return

    combined = list(zip(first, second))
    for c in combined:
        complete = str(c[0]) + str(c[1])

        # decode
        base64_bytes = complete.encode('ascii')
        message_bytes = base64.b64decode(base64_bytes)
        decoded = str(message_bytes.decode('ascii'))
        coord.append(decoded)

    return coord

# method to save the coordinates in output file
def save_coordinates(coordinates):
    f = open("coordinates.txt", "w")
    for coordinate in coordinates:
        f.write(coordinate + "\n")

    f.close()

first_part = []
second_part = []

# open the wireshark export file
# with the base64 strings
with open("values.json", "r") as f:
    packets = json.load(f)
    for packet in packets:
        trace = packet['_source']['layers']

        if 'dns' in trace.keys():
            dns = trace['dns']['Queries']
            value = list(dns.keys())[0].split('.')[0]

            # in the file, subsequent b64 strings taken as couples 
            # form a single GPGGA coordinate
            if value[0] == "J":
                first_part.append(value)
            else:
                second_part.append(value)

coordinates = find_coordinates(first_part, second_part)

# save_coordinates(coordinates)

N = []
W = []
altitude = []

# get the coordinates
for i in coordinates:
    i = i.split(',')
    N.append(float(i[2]))
    W.append(float(i[4]))
    altitude.append(float(i[9]))

# plot the graph with latitude and altitude
# it forms a qr code that can be read with 
# every app. Just shrink it a little
plt.figure()
plt.scatter(N, altitude)
plt.show()
